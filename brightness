#!/usr/bin/python

# This application is released under the GNU General Public License 
# v3 (or, at your option, any later version). You can find the full 
# text of the license under http://www.gnu.org/licenses/gpl.txt. 
# By using, editing and/or distributing this software you agree to 
# the terms and conditions of this license. 
# Thank you for using free software!
# 
# (c) Nikola 2017 <nikolaonet@yahoo.com>
#
# This is simple GTK 2.0+ Python program that
# alows user to changde brightness.
# Made for Zorin OS 9 Lite.
# This is free software made available under the GNU public license.

import pygtk
pygtk.require('2.0')
import gtk
import os
import sys

# path to GNU/Linux brightness files
path = "/sys/class/backlight/"
# path to app icon, probably won't work without ZorinDark icon theme
applogo = "/usr/share/icons/ZorinDark/scalable/status/notification-display-brightness.svg"

subdirs = [] # list of all directories in path
for subdir in os.listdir(path):
	subdirs.append(os.path.join(path,subdir))

subbrig = [] # list of all brightness files which contain current brightness 
for subdir in subdirs:
	subbrig.append(os.path.join(subdir,"brightness"))

# opening brightness file
try:
	with open(subbrig[0],"r") as f:
		fajl1 = f.readlines()
except IOError:
	exit("Unable to open and read brightness file!")

# storing current brightness value
current_brightness=int(fajl1[0])
f.close

subbrigmax = [] # list of all max_brightness files witch contain max brightness
for subdir in subdirs:
	subbrigmax.append(os.path.join(subdir,"max_brightness"))

# opening max_brightness file
try:
	with open(subbrigmax[0],"r") as f:
		fajl2 = f.readlines()
except IOError:
	exit("Unable to open and read max_brightness file!")

# storing current max brightness value
max_brightness=int(fajl2[0])
f.close

class Brightness:
	# scale on change save to current brightness file
	def scale_moved(self, event):
		try:
			with open(subbrig[0],"w") as f:
				f.write(str(int(self.h_scale.get_value())))
				print "Opend " + subbrig[0] + " as writable."
		except IOError:
			exit("Unable to open and write to brightness file!")
		f.close

	def delete_event(self, widget, event, data=None):
		print "delete event occurred"
		return False

	def destroy(self, widget, data=None):
		print "destroy signal occurred"
		gtk.main_quit()

	def __init__(self):

        	# create a new window
		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.set_title("Brightness Changer")
		self.window.set_position(gtk.WIN_POS_CENTER)
		self.window.set_icon_from_file(applogo)
		self.window.set_size_request(300, 60)
		self.window.set_resizable(False)
		self.window.connect("delete_event", self.delete_event)
		self.window.connect("destroy", self.destroy)
		self.window.set_border_width(10)

		# creating label that shows min brightness value
		self.labelmin = gtk.Label(" 0 ");
		
		# for h_scale 
		# setting increment
		inc=int(fajl2[0])//10

		# setting adjastment
		ad1 = gtk.Adjustment(current_brightness, 0, max_brightness, inc, inc, 0)

		# creating h_scale
		self.h_scale = gtk.HScale(adjustment=ad1)
		self.h_scale.set_digits(0)
		self.h_scale.connect("value-changed", self.scale_moved)
		
		# creating label that shows max brightness value
		self.labelmax = gtk.Label(" "+str(max_brightness)+" ");

		# creating hbox that holds all widgets		
		self.hbox = gtk.HBox(False, 0)
		
		# adding widgets to hbox
		self.hbox.pack_start(self.labelmin, False, True, 2)
		self.hbox.pack_start(self.h_scale, True, True, 2)
		self.hbox.pack_start(self.labelmax, False, True, 2)

		# adding hbox to window
		self.window.add(self.hbox)
		self.labelmin.show()
		self.h_scale.show()
		self.labelmax.show()
		self.hbox.show()
		self.h_scale.grab_focus()

	        # and the window
		self.window.show()

	def main(self):
		gtk.main()

if __name__ == "__main__":
	plus = Brightness()
	plus.main()

